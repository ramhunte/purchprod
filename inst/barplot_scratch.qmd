
# fmt: skip file


# bar plot 
```{r}
library(ggplot2)
library(forcats)




barchart <- ggplot2::ggplot(
    data =  proddf_prac |>
        dplyr::filter(
          year %in% c("2022", "2023"),
          statistic == "Total",
          metric == "Production value",
          variable == "All production"),
    ggplot2::aes(
      x = forcats::fct_reorder(type, value),
      y = value,
      fill = factor(year)
    )
  ) +
    # adding count text to each bar
    ggplot2::geom_col(position = "dodge") +
    ggplot2::labs(fill = "Year", x = "", y = "") +
    ggplot2::scale_fill_manual(
      values = setNames(
        c(pal[["light_text"]], pal[["dark_text"]]),
        c("2022", "2023")
      )
    ) +
    ggplot2::scale_y_continuous(limits = c(0, 780)) +
    ggplot2::scale_x_discrete(
      labels = c(
        "Canned" = "Canned",
        "Fillet" = "Fillet",
        "Fresh" = "Fresh",
        "Frozen" = "Frozen",
        "Headed-and-gutted" = "Headed-and-gutted",
        "Other" = "Other",
        "Unprocessed" = "Unprocessed",
        "Smoked" = "Smoked"
      )
    ) +
    ggplot2::coord_flip() +
    ggplot2::theme(
      # note: need to make these fills as transparent for final figure when stitching together
      # they are colored right now so we can show the bacgkround color in the individual plot
      panel.background = ggplot2::element_rect(
        fill = pal[["bg_plot"]],
        color = pal[["bg_plot"]]
      ),
      plot.background = ggplot2::element_rect(
        fill = pal[["bg_plot"]],
        color = pal[["bg_plot"]]
      ),
      # axis
      axis.line.x = ggplot2::element_blank(),
      axis.line.y = ggplot2::element_blank(),
      axis.text.y = ggplot2::element_text(
        color = pal["value1"],
        # family = "sen",
        size = 18,
        hjust = 1,
        margin = margin(-10, -20, -50, 0)
      ),
      axis.text.x = ggplot2::element_text(
        color = pal["value1"],
        size = 18
      ),
      # axis.text.x = element_blank(),
      axis.ticks.y = ggplot2::element_blank(),
      axis.ticks.x = ggplot2::element_blank(),
      # axis.ticks.x = ggplot2::element_line(color = pal["dark_text"]),

      # grids
      panel.grid.major.x = element_line(color = pal[["value2"]]),
      panel.grid.minor.x = element_blank(),
      panel.grid.major.y = element_blank(),
      panel.grid.minor.y = element_blank(),
      # legend
      legend.position = "none"
    )

barchart
```




# radar plot 
```{r}
library(fmsb)
library(ggradar)


radar_df <- proddf_prac |> 
  dplyr::filter(
          year %in% c("2021", "2022"),
          statistic == "Total",
          metric == "Production value",
          variable == "All production"
        )  |> 
  tidyr::pivot_wider(names_from = type, values_from = value) |> 
  dplyr::rename(group = year) |> 
  dplyr::select(c(group, Canned:Unprocessed)) |> 
  dplyr::group_by(group) |> 
  dplyr::summarise(across(c(Canned:Unprocessed), ~ sum(.x, na.rm = TRUE)))

ggradar::ggradar(radar_df)




```


# tree plot

```{r}
library(ggplot2)
library(dplyr)
library(treemapify)


tree_df <- proddf_prac |> 
  dplyr::filter(
          year %in% c("2021", "2022"),
          statistic == "Total",
          metric == "Production value",
          variable == "All production"
        ) 

# making a tree map
tree_fig <-  ggplot2::ggplot(tree_df, ggplot2::aes(area = value, fill = factor(year),
                                 label = factor(year), 
                                 subgroup = type)) +
  # labs(title = "Comparing the World's 10 Largest Fishing Fleets") +
  ggplot2::scale_fill_manual(values = c("#5EB6D9", "darkblue")) +
  treemapify::geom_treemap() +
  treemapify::geom_treemap_subgroup_border(colour = "white", size = 2) +
  treemapify::geom_treemap_subgroup_text(place = "centre", grow = TRUE,
                             alpha = 0.7, 
                             lineheight = 0.3,
                             colour = "white",
                             size = 2) +
  ggplot2::theme(
    panel.background = ggplot2::element_rect(fill = "transparent", color = NA),
    plot.background = ggplot2::element_rect(fill = "transparent", color = NA),
    legend.position = "none")


tree_fig

```

